<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>摘星</title>
    <link href="/2025/06/26/star-picking/"/>
    <url>/2025/06/26/star-picking/</url>
    
    <content type="html"><![CDATA[<div style="text-align:center;">一闪一闪亮晶晶，满天都是小星星。   ——题记</div><hr><p>安静的庭院，寂静的夜，月光流在地面上，照亮了一头银发和一头黑发。</p><p>“奶奶，那些一闪一闪的是什么啊？”“那是星星，是宇宙的眼睛。”“奶奶，我想要那颗红通通的星星！”小孩伸手去指，那颗红色的星星十分明显。“好，好！奶奶会去给小岚摘星星的！”老人笑呵呵地说。</p><hr><p>“这是一颗距离地球38.3光年的红巨星，有一颗类地行星……”</p><p>“啪！”岚文重重的关掉了这个窗口，骂到：“谁家科普这么做啊！”</p><p>“主人，你的咖啡。”一个仿生人走了过，“五百毫升一摩尔每升加十六克方糖的咖啡。”“谢谢。”岚文接过咖啡，“星星，其实你没必要每次都这么泡的。”</p><p>“主人，这是在做什么？”她指着面板上的模型。</p><p>“一颗星星。”</p><hr><p>老人躺在白色房间的床上，侧过头去看窗外的绿树和黄花。墙上的屏幕里播着今天的新闻。</p><p>一个人推门而入：“奶奶，我来看您了。”</p><p>“小星啊。小岚最近怎么样？”老人转过头，问。</p><p>“身体很好，就是挺忙的。”星星将一袋水果放到自动伸出的桌板上，在床沿坐下。</p><p>“他当然忙啦！大工程师嘛！”老人哂笑，摇起了床头，坐了起来。</p><p>“您感觉怎么样？”星星为老人梳头发。“我的身体好着呢！肺癌算什么？我还要等着抱曾孙呢！”老人打了个哈哈，然后从枕头下拿出一个鲜见的东西——一本书。那是一本《鲁迅全集》。</p><p>“你来给我念念吧，上次看到第193页了。”</p><p>电视里，联合国秘书长刚刚宣布了银河系恒星买卖法。</p><hr><p>岚文正在认真修改Linux的代码，有人推门而入。</p><p>“老岚啊，你看看这是啥！”那人递给岚文一个邮封。</p><p>“下次记得敲门。星杰，你这习惯得改改。”岚文接过，沉甸甸的。心不在焉地打开，一个精致的证书露了出来，蓝皮，白纸；还有一个档案袋。</p><p>“这是……？”岚文翻来翻去地看这证书。</p><p>“老岚啊，有人送了你一颗星星！”星杰用力一拍工作桌，一个警告窗口弹了出来。</p><p>“这不就智商税？”岚文把证书轻轻地摆在后面的柜子上，一个恒星模型的旁边。</p><p>“有人送了你一颗星星诶！多浪漫！”星杰蹦蹦跳跳，“我们老岚也有人爱啦！”</p><p>晚上，他问星星，这颗星星在哪。</p><p>星星挠挠头：“资料写的……在东南方，地面向上仰53.6°，一颗红色的星星。”然后指着一个方向：“好像是那里。”</p><p>岚文望去，那颗红色的星星十分明显，在一众白色亮星中一眼就能看出来。</p><p>“很浪漫吗？”岚文不解地望着那颗星星，感觉在哪见过这颗星星。</p><p>“主人你个榆木脑袋，这么浪漫的东西，你居然察觉不到。”星星摇摇头。</p><hr><p>“我提议，咱去看看你那颗星星！”星杰手握几串烤肉，吃的油光满面。</p><p>“三十多光年，你说去就去？”岚文喝了口啤酒。</p><p>“曲率飞船呗，”星杰又啃了一口肉，“那嗖的一下得有多快！”</p><p>岚文呆呆地看着正冒着火的交谈，张口要去吃肉。</p><p>城市的街道，五彩斑斓的灯，墙上闪动着一张又一张动图。几辆电车无声地从旁行过，只留下几条炫丽的光带。几个路人或手提东西，或看着一块屏幕，从烧烤摊旁边过去了。</p><p>忽然，一块肉不小心掉了下来，掉进炭中溅起火星来。</p><p>“好烫！”岚文叫着退了两步。一个全息窗口弹了出来，一个男人在上面看着岚文：</p><p>“先生，您看起来好像被火星烫伤了。”</p><p>“火星？火星不在那吗？”岚文指指天上，“而且它也不烫啊，我怎么被烫伤？”</p><p>“啊，我是指焦炭上的火星。”</p><p>“哦哦，对不起，脑子有点昏。”岚文揉揉太阳穴。</p><p>这时又弹出一个通话窗口，岚文接过电话。</p><p>“喂？嗯……好。”</p><p>“你又在和谁打电话？”</p><p>“我的天文学家朋友，他邀请我们去看星星。”</p><p>“去哪看？”</p><p>“星星旁边。”</p><hr><p>一搜飞船带着蓝光从太空城直直飞出。</p><p>前面的星星挤在一个点上，变成蓝色；后面的星星挤在一个点上，变成红色。岚文他们的飞船在两点连成的直线上做加速运动。只见得面前的亮点越来越蓝，越来越紫，渐渐暗了下去。只有不时闪过的一条光带证明他们在航行——那是掠过的一个又一个恒星。</p><p>“这该死的多普勒效应。”岚文瘫坐在座位上，“一个星星也看不到。”</p><p>“你那位天文学家朋友呢？”星杰把一片薯片小心翼翼地塞进嘴里。</p><p>“他啊，他说他有篇论文还没写完，下次在一起来。”岚文左手盖住眼睛，“星星，过来一下，我睡会儿。”</p><p>星星从控制台那边走过来坐下，岚文靠着她的肩睡着了。</p><p>一艘飞船带着蓝光划过暗黑色深空，在宇宙中划出一条优美的直线，最后消失在宇宙深处。</p><hr><p>老人慢慢乘上扶梯，一位服务员来迎接她。</p><p>“阿姨，您好。”</p><p>“我是来买星星的。”老人直入主题。</p><p>“好的。”服务员呼出一个全息屏幕，然后打开某个开关，巨大的星图忽然围绕在他们周围。老人没等服务员说话，就指着一个星星：</p><p>“那颗。”</p><p>“啊，可是，阿姨，它……”</p><p>“那颗。”</p><p>“但是，它的……”</p><p>“我说了，就要那颗。”</p><p>“啊，好吧。”服务员招手把那个星星唤了过来，“挺大一颗红巨星，有一个类地行星，离地球三四十光年吧，在地球上可以看见。”</p><p>“我知道。”老人看着这颗星星，“报价吧。”</p><p>“嗯，您是我国第一例买恒星的，本来是五十多万，打个八折，大约四十万元吧。”服务员在屏幕上点点点。</p><p>“好，刷卡吧。”老人吃力地拿出银行卡，靠在卡机上，这辈子的积蓄就这么没了。</p><p>“嗯，阿姨您买这颗星星是要干什么?”服务员开始填写资料。</p><p>“送人。”老人眼神温柔起来，全然失去了伤病的痛楚。</p><p>“那收到这份礼物的人一定很幸福吧。”服务员笑了，“有人送了他一颗星星。”</p><hr><p>岚文醒来时，星杰在控制台操作些什么。</p><p>“主人，你醒啦？”星星递过一杯咖啡，“给，咖啡。”</p><p>“还是一摩尔每升的，加了十六克方糖的？”</p><p>“对，五百毫升。”</p><p>挡风玻璃前，一颗红色的恒星在燃烧，在不断地聚变。不时在表面抛出一团物质，然后又坠回去。</p><p>岚文忽然想起了什么，放下咖啡，呼出一个面板，打开了什么。</p><p>“这个波长，这个频率，这个光度，这个宇宙距离——”岚文喃喃着，“星星，帮我查询一下二十年前的星空。”</p><p>星星开始翻找起来，岚文则又拿起咖啡抿了一口。</p><p>“找到了。”星星把面板递给岚文。岚文把星图整个的，放到飞船内。像无数次在梦中尝试过的那样，他在三秒内找到了那颗熟悉的星星，双手一挥，把那颗火红的恒星放到了自己的面前。岚文走到挡风玻璃前，伸手放在它们的影子上。</p><p>挡风玻璃仿佛成为了一面半透的镜子，星图的虚像和星星的实像重叠在了一起，严丝合缝。</p><hr><p>白色的房间里，床上的老人冒着冷汗，不断地喘着大气。</p><p>她抱着一个蓝皮的证书，口里念念有词：“星星啊，我孙子最爱的星星……”</p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>千面</title>
    <link href="/2025/06/26/thousand-faces/"/>
    <url>/2025/06/26/thousand-faces/</url>
    
    <content type="html"><![CDATA[<div style="text-align:center;">致一千个读者和他们的一千个哈姆雷特。  ——题记</div><hr><p>他坐在长椅上，将鸟饲一点一点播撒在地上，任这些鸟儿啄食。他注意到一只不同的鸟，在一众白花花的鸟儿之中，它的身上嵌了一些黑羽，比那些他看厌了的鸟儿好看多了。不多时，左手的鸟饲撒尽。他站起身，扶了扶眼镜，打理一下外衣，便向外走去。背后传来鸟儿振翅的声音，但他只是顿了一下，只是继续走。</p><hr><p>“吴亮是吧？”“对。”“有什么难受的？”“不知道。”“精神分裂？”“大概是。”“那行。”医生盯着吴亮的眼睛，“我问你几个问题。你有发现生活有什么异常吗？”</p><p>吴亮摸摸鼻子，又将手扶在下巴上，沉思良久：“或许突然睡着，发现自己不是自己，醒来，自己还是自己。这算吗？”</p><p>“什么叫自己不是自己？”心理医生拿笔轻轻地敲桌子。</p><p>吴亮忍住抢走笔的冲动，把手放到椅子扶手上，深呼吸：“就是发现自己变作了另一个自己，不再是自己的自己。”吴亮看医生的表情有些不对劲：“你是不是想笑？”</p><p>“不不，吴先生，我是经过专业训练的。”医生转转笔，“能仔细说说你的‘自己不是自己’么？”</p><p>“不好说……”</p><p>“那就不说。好下一个，既然你被上一位医生认定为精分，那你能感知到其他人格吗？”</p><p>“不能。”</p><p>“一点都不能？”</p><p>“一点都不能。”</p><p>阳光穿过咨询室的窗户，在窗口上滑出光与暗的分界线。几只白鸟在树枝上站着，用同样的歌嗓唱着同样的歌。只有风吹过叶子时，发出的与众不同混入其中，在原有的无趣之中增添了一丝乐趣。</p><p>墙上的两个人影，一个很镇定的坐着，另一个装作很镇定地坐着。</p><p>吴亮走出门，刚关上门，就听到里面传出大笑声和拍桌子的声音。吴亮唤出一块全息屏，上面标满了一天的行程，居然比预定的早半个小时出来。于是吴亮去了最近的咖啡馆。</p><hr><p>仁欣庙是一座庙，在仁欣山的云雾之中。第一个见到这高山的人叫它仁欣山，这山便成了仁欣山；第一个在上面筑的庙自然也便成了仁欣庙。</p><p>仁欣庙很大，外面的人都说这庙里有好几百个和尚。但吴亮进去的时候只有孤零零几个和尚，有几个还在玩面前花花绿绿的屏幕。几个盘坐在毡子上吃着饭。</p><p>“和尚也吃肉吗？”吴亮问那几个吃饭的和尚。</p><p>“和尚也是人啊兄台。”其中一个端着碗，碗里的米饭盖上了油水，“兄台吃过没有？”</p><p>“吃过了，谢谢。”吴亮摇摇手，然后向中心庭正对的大房子走过去。</p><p>里边明晃晃的，墙上插着很少见的蜡烛，上头顶着个日光灯。而多大个厅堂只有高台上的一个巨大的佛像。佛像微睁双眼，打着坐，一手平胸齐，做念经状。浓眉，大耳，身上的袈裟在日光灯下金灿灿的。</p><p>吴亮不知道为什么来，他不信佛，只是去一旁买了烛火，在这佛像面前的鼎——我们姑且称之为鼎——里的一大堆签签茬中又插了一对烛三枝香。于是在毡上跪下，很虔诚地拜了三拜。</p><p>“老师傅，这位是什么佛？”吴亮问那个卖烛火的老人。</p><p>“吴亮佛，”老人抬眸，“就叫吴亮。”</p><p>吴亮惊恐地回头看那佛像，那佛像像是活了一般盯着他看。</p><p>他感觉全世界都暗了下来，只有那佛像亮堂堂地，立在一片虚无之中。他感觉一整个世界杯拉的很长，他在这边，佛像在那边。他感觉像是在下坠，而他和佛像将同时落地。</p><hr><p>“吴亮先生。”一个人拍了拍愣在原地的吴亮。</p><p>“额……啊？”吴亮猛地回头，眼镜被弄歪了。</p><p>“我叫张源，你可以叫我老张。”张源拍拍胸脯。</p><p>“你……你怎么知道我的名字？”</p><p>“我不仅知道，我小时候还抱过你哪。”张源笑眯眯的。</p><p>“我怎么不知道？”</p><p>“说明保密做得很好。”张源很神秘地笑笑，“这是一个伟大的计划。”</p><p>张源领着吴亮走到佛像后面的房间，揭开一块地板，露出长长的梯子。张源把着梯子就滑了下去，吴亮攀着那冷冰冰的梯子一步一步下去。</p><p>很暗，但亮着白炽灯。四面都是金属的墙，地板也是金属的。角落摆着几个纸箱，有几个开着，里面装的是些零食和日用品。地刚拖过，摆着一个“小心地滑”的指示牌。</p><p>但吴亮刚走两步就打了个踉跄。他指着那几个纸箱：“有人住这儿？”</p><p>“有，还不止我一个。”张源抬手点了几下浮在面前的屏幕，一堵墙上豁开一个门洞，“走这边。”</p><p>吴亮回过头去看那个指示牌，下面的英语是“Slide Carefully”。他什么也没说。</p><p>他们来到一个排满了小屏幕的房间，吴亮无法相信在这样一个庙里会有这么多现代设施，给他一种创月失败的感觉。</p><p>“这里有千多个屏幕，”张源在一台电脑边输入了什么，“它们由一台强大的计算机驱动，是来自千多个人的视角。”</p><p>“一千个？！”吴亮大惊，后退两步。</p><p>“不止。里边有你的，但我刚刚关掉了。递归了就炸了。”</p><p>“你们怎么做到的？”</p><p>“在近千人出生时在他们的脑中植入一块小指指甲盖大小的芯片，用于获取每个人的视觉、听觉。然后记录在硬盘中。”张源边说边比划，“你能想象我们需要切掉多少大脑皮层么？”</p><p>“你们要做什么？！”吴亮瘫坐在金属地板上。</p><p>“你冷静一下，这对你们都是无害的。这是‘千面’计划，我们记录无数人的记忆，将它们都注入到同一个人的脑中。你应该有梦到一些自己从未有过经验的经历吧？那是‘千面’为你随机传输了一些来自其他人的记忆。可以说，他们是世界上另一些你。</p><p>“最后放到一个电脑中，造出拥有人的思考模式的，拥有人生的，真正的‘数字生命’。毕竟，把AI变成人很难，但是把人变成AI就简单了。”</p><p>“不要再说了！”吴亮从地上爬起来，滑出房间，攀着梯子，冲出了仁欣庙。然后发动车子飞速下山。</p><p>“老张，要追吗？”一吃饭的和尚端着碗凑到从房里出来的张源问。</p><p>张源点了支烟：“不用。他会回来的。”</p><hr><p>吴亮吓得在公司请了一周的假。</p><p>他趴在窗前，数天上的云，数地下的人。吃着永远吃不完的供应粮，睡着永远过不完的夜。百般无趣之中，吴亮的脑子里迸出两个问题：</p><p>我是谁？</p><p>我活着的意义是什么？</p><p>第一个问题他很快就想通了。他是吴亮，是千万个吴亮之中的一个吴亮。</p><p>他是由一堆细胞，一坨有机物，一滩原子构成的东西，在千百万年的进化之中诞生了思想，在磨难之中诞生了创造。</p><p>究其本源，是一堆氨基酸的自由组合中诞生了一个蛋白质，一堆脱氧核糖核酸的随机排列中出现了一对优美的DNA，在成千上万个“RANDOM”之中产生的一团不可名状之物：一个头，两双手，两条腿上立了个身子。</p><p>我大概是个人，人是什么？是千万星火中的一点。</p><p>吴亮便开始思考第二个问题。</p><p>他不认为活着的意义是去码头整点薯条。如果是这样，那他的活着便是没有意义的。那活着的意义是什么？为了活着吗？</p><p>吴亮怎么也想不通第二个问题。</p><p>他在夜里数星星，看星星散开又聚拢，聚拢之后又散开。在千变万化之中，他领悟了活着的意义——</p><hr><p>他再次来到仁欣庙的时候，那个老男人正叼着烟倚着门。和尚们有的在看屏幕，有的在吃饭，就和上次一样。</p><p>“老张，下午好。”吴亮俨然是个哲学家了。</p><p>“下午好，来干什么？”</p><p>“上柱香。”</p><p>与上次一样，吴亮拿着香和烛插入那鼎中，又在毡上虔诚跪拜。那佛像直盯盯的看着他，他也直盯盯地看着那佛像。</p><p>“没事啦？”张源喷了口烟。</p><p>“你们不是还有个计划吗？”</p><hr><p>夕阳下，一群白色的鸟儿在地上啄食着玉米粒。有一只鸟儿很好看，在白色之中嵌了一些黑羽。城市的灯已经亮了起来，各式各样的灯光在太阳消失之前涌现。</p><p>昏暗的房间里，白炽灯一闪一闪的，有两个人：一个在屏幕外抽着烟，一个在屏幕里划着圈；一个很镇定地站着，一个装作很镇定地站着。</p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雨</title>
    <link href="/2025/05/30/rain/"/>
    <url>/2025/05/30/rain/</url>
    
    <content type="html"><![CDATA[<p>一个人，就百无聊赖地坐在看台上，望着天上发呆。一直是一个人，其他人都肩碰肩地聊着什么，从下面踱过，一直是一个人。</p><p>他不是抑郁了，只是悲伤。</p><p>不知道什么时候，他开始感受到时间的流逝。他能在一夜间将过去的十六年都回忆一遍，十分迅速地。感觉就是一瞬间。</p><p>孤零零地坐着，一个人。天空很蓝，白云一团一团地从太阳下面走过。不知道为什么，他忽然渴望一场雨，把自己浇得湿透。</p><p>正是一个雨夜，他撑着破旧的伞，回到家。酒味，汗味，烟味。屋里昏暗，电视的声音很小，只能听见两个人的争吵。他的妹妹蜷缩在角落，含着泪，在看一本什么《简·爱》。他带上门，把伞撑开，摆在阳台。雨，狠狠地打在铁棚上，发出骇人的声响。</p><p>这并不是他们第一次争吵了。他对此感到习以为常，所以毫无压力地穿过两人，去牵妹妹的手。“去洗漱，睡觉了。”他说。他的妹妹才颤抖着合上书，跟着哥哥在两人的争吵声中去了洗手间洗漱。</p><p>“你以为我很快乐么？我感觉我就是一只被束缚在笼子里的鸟！”女人大吼。</p><p>“那你离婚就可以快乐了？”男人坐在餐桌旁，把啤酒杯用力地搁在桌上。</p><p>“比现在快乐，”女人尖叫，“远远比现在快乐。”</p><p>男人又点了一支烟，抽了一口，火星的光亮在暗中若隐若现。然后喷出一股白烟。</p><p>他在洗手间刷着牙，没有对他们的对话产生任何情绪。</p><p>大抵是没有情绪，只是垮着脸，一言不发地听着，吵架声和刷牙声。</p><p>他听到两人从生活一直吵到孩子。他洗漱完，去睡觉。走之前，他对两人说：“你们小声一点，我要睡觉。”然后弱弱地回了房间。</p><p>酒味，汗味，烟味。他强迫自己闭上眼，然后入睡。外面的声音杂乱，吵架声，雨声，雷声，风刮过窗洞的呼声和异物达到玻璃上的声音。有时还有楼下的，小孩子在雨中嬉闹的笑声。</p><p>起床，看着乱糟糟的客厅，和镜中乱糟糟的自己，他感到一丝空虚。简单洗漱之后，他走路去学校，没吃早饭。</p><p>校园的一角是热闹的，校园的一角是死寂的。他不敢跨进前者，只好在后者中隐匿。没有人会在意一个坐在看台上的，傻乎乎望着天空发呆的人。</p><p>他曾尝试加入热闹的一角。他加入各种社团，参加各种志愿，也学习各种别人的爱好。但他失败了。他就想一个“杂质”一样，永远不和任何试剂反应。所以他还是一个人头孤零零地坐着。</p><p>有那么一段日子，是有个女孩和他做朋友的。他们关系很好，女孩对男孩的照顾无微不至。他和她聊天，感觉自己活了，感觉自己才是活生生的人。但不知道什么时候，女孩离开了学校，大抵是转学了，他也至此再未见过她。</p><p>他再次变回那个死气沉沉的样子。</p><p>坐在看台上，他开始回忆他的从前。</p><p>幼儿园时，他在众人的期待中成长。在小学时候，他的才华就被展现了除了，他活力四射，很调皮。直到上了初中，他才见识到“人情世故”，才意识到社会的运行并非自己想象那样单纯：针对和排斥，冷眼和嘲讽，各种东西在他的眼中发生。他开始怕了，他开始担心了，他开始畏惧不前了。</p><p>他还记得他的父亲居高临下地看着他，把一口烟喷到他的脸上：“你看看你，长得也不好看，办事也净帮倒忙，什么技能都不会。”所以他怕他的父亲，至始至终都很怕。不过他的母亲却经常拍拍他的背，在他挫败的时候鼓励他，在他成功的时候赞美他。</p><p>他的父亲后来创业失败，亏损很多，又想换车，借了车贷，家境拮据；在那之后，便萎靡不振，酗酒，动不动就骂他。他的父亲还为此减少了向他和他母亲提供的生活费。</p><p>他的父亲沉迷于花天酒地中，却又时刻提防着他的母亲的交友和日常生活。</p><p>所以两人开始吵架了，嚷嚷着要离婚。</p><p>那就离婚罢，他一直都无所谓的。他被划给了他的父亲。</p><p>而他的父亲，仿佛是要想他赎罪一样，也开始不厌其烦地关照他了。</p><p>他就一个人，一个人坐在看台上。</p><p>他忽然大吼一声：“如果能回到过去该多好。”有几个压马路的人看了他一眼，然后又聊着天走开了。</p><p>他觉得现在的日子也很好，至少没差。不过少了些说话的人而已。他可以在死寂的一角，静静地看云朵飘动，可以看时间就带着一群记忆笑着从他面前跑过去。有人告诉他，没有理想，那和咸鱼有什么区别。他只是笑笑，问那个人，咸鱼翻身就不是咸鱼了吗？</p><p>他仿佛想通了什么，他发现自己不可能活成别人期待的样子，他只有活成一个别人从未想过的样子。在成人之前要先成为自己。他明白，一个人要是活在对过去的想象和荣耀中，那肯定是难以进步的。时间还在跑，日子还得过。</p><p>雨最后还是没有下，云还是照常在天上缓缓地行径着，一会儿挡住了太阳，一会儿又移开为阳光让道。一些人聊天的声音，夹杂着风吹动树叶发出的声音。如果能有时光机，他真想回到过去，在那个他还是个淳朴的小孩子的时候，告诉过去的他要珍惜这些时光，告诉他这样的日子还能有多久。</p><div style="text-align:right"><p>二〇二五年五月三十日<br>作于B中 </p></div>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单地编写一个Scratch扩展</title>
    <link href="/2025/03/09/How-to-write-a-Scratch-extension/"/>
    <url>/2025/03/09/How-to-write-a-Scratch-extension/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着<strong>图形化编程</strong>的兴起，比如 <strong>Scratch</strong>、<strong>编程猫</strong>和 Mind+ 等等变得越来越受欢迎。同时，像 Scratch 原有的内容已经不足以给各位提供足够的函数了。像 <strong><a href="https://turbowarp.org/">TurboWarp</a></strong>、<strong><a href="https://ccw.site/gandi">Gandi IDE</a></strong>、Scratch Lab、Scratch X 等就提供了丰富的非原版函数库(即扩展，mod)。比如，你可以访问 <a href="https://extension.turbowarp.org/">TurboWarp扩展库</a> 来查看 TurboWarp 为 Scratchers 提供的扩展。扩展和其他编程语言的“库函数”相似，都是添加原来没有的函数内容。如果你认为这些内容还不够你用，那你就得自己写了。怎么写呢？接下来就听我娓娓道来！</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>很显然，你需要一个好用的<strong>文本编辑器</strong>(比如 VSCode、Notepad++等，当然，你直接用记事本也可以)、一个可以加载自定义扩展的 Scratch Mod (比如 <a href="https://turbowarp.org/editor">TurboWarp</a>、<a href="https://www.ccw.site/gandi/extension">Gandi IDE 扩展模式</a>等)、以及一些 JavaScript 基础。</p><p>如果你自恃拥有强大的编程能力和足够的英语基础，你可以前往 <a href="https://docs.turbowarp.org/development">TurboWarp 扩展文档</a> 查看更官方更权威的扩展教程。</p><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><p>首先，我将为你展示 Scratch 扩展文件的基本结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">Scratch</span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br><br>    <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">setup</span>(&#123;...&#125;);<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtName</span> &#123;<br>        <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">id</span>: ...<br>                <span class="hljs-attr">name</span>: ...<br>                ...<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-title class_">Function</span>(arg) &#123;...&#125;<br>    &#125;<br><br>    <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtName</span>());<br>&#125;)(<span class="hljs-title class_">Scratch</span>);<br></code></pre></td></tr></table></figure><p>如上，这就是最基本的 Scratch 扩展格式。其中，<code>Scratch.translate.setup()</code>为你的扩展提供了 l10n (本地化)支持，可以提供这个函数来设置多语言。之后就是定义一个类了，这个类当中包含了你的扩展的信息(<code>getInfo</code>)和函数定义。最后，通过<code>Scratch.extensions.register()</code>函数来注册这个扩展。</p><p>接下来，让我们慢慢讲具体的内容~</p><h2 id="Scratch-translate-setup-l10n-支持"><a href="#Scratch-translate-setup-l10n-支持" class="headerlink" title="Scratch.translate.setup() l10n 支持"></a><code>Scratch.translate.setup()</code> l10n 支持</h2><p>在 Scratch 扩展中，<code>Scratch.translate.setup()</code>的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Scratch</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">setup</span>(&#123;<br>    <span class="hljs-string">&quot;en&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;_key&quot;</span>: <span class="hljs-string">&quot;translation&quot;</span>,<br>        ...<br>    &#125;,<br>    <span class="hljs-string">&quot;zh-cn&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;_key&quot;</span>: <span class="hljs-string">&quot;翻译&quot;</span>,<br>        ...<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>给这个函数提供一个 JSON 参数，在之后重新调用<code>Scratch.translate()</code>函数就可以将<code>key</code>字符串自动转换为对应的值(也就是翻译内容)。比如，我在上面设置了<code>&quot;_key&quot;</code>对应的值是<code>&quot;翻译&quot;</code>，那么，当我的编辑器语言为简体中文<code>(zh-cn)</code>的时候，<code>Scratch.translate(&quot;key&quot;)</code>就会返回<code>&quot;翻译&quot;</code>。</p><p>这是由 Scratch 本身提供的翻译功能，善用它会取得不错的成效。</p><h2 id="getInfo-给你的扩展编写信息"><a href="#getInfo-给你的扩展编写信息" class="headerlink" title="getInfo() 给你的扩展编写信息"></a><code>getInfo()</code> 给你的扩展编写信息</h2><p>在<code>getInfo()</code>函数中，你应该为其定义编写一堆内容，包括了<code>扩展ID</code>，<code>扩展名</code>，<code>扩展积木颜色</code>，<code>扩展积木</code>等等。接下来我会给出一个简单的 getInfo() 示例，它可以创建一个 COMMAND 块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;SampleExt&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;示例扩展&quot;</span>,<br>        <span class="hljs-attr">color1</span>: <span class="hljs-string">&quot;#66ccff&quot;</span>,<br>        <span class="hljs-attr">blocks</span>: [<br>            &#123;<br>                <span class="hljs-attr">opcode</span>: <span class="hljs-string">&quot;SampleBlock&quot;</span>,<br>                <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">COMMAND</span>,<br>                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;示例积木&quot;</span><br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，在<code>getInfo()</code>的定义中，你会看到一些键值对，比如<code>id</code>、<code>name</code>、<code>color1</code>等等。其中，<code>id</code>是扩展的唯一标识符，<code>name</code>是扩展在工具箱(也就是左侧那个版块)显示的名称，<code>color1</code>则是扩展的颜色，<code>color1\2\3</code>分别对应了块的背景色、边框色和激活或选中时的颜色。</p><p>在上面，我省略了一些键值对，我把它们放到下面了：</p><table><thead><tr><th align="center"></th><th align="center">类型</th><th>功能</th></tr></thead><tbody><tr><td align="center">menuIconURI</td><td align="center">string(dataURL)</td><td>设置显示在侧栏左侧按钮上的图标</td></tr><tr><td align="center">blockIconURI</td><td align="center">string(dataURL)</td><td>设置显示在块左侧的图标</td></tr><tr><td align="center">docsURI</td><td align="center">string(URL)</td><td>设置扩展文档的链接，当有这个内容时，会自动创建一个文档按钮</td></tr><tr><td align="center">disableMonitor</td><td align="center">boolen</td><td>是否禁用监控器，如果为true，将允许这个可以返回值的块在舞台上显示一个监视器，就像变量一样</td></tr><tr><td align="center">hideFromPalette</td><td align="center">boolen</td><td>是否在工具箱中隐藏，这是很有用的，有利于向后兼容</td></tr><tr><td align="center">filter</td><td align="center">Scratch.TargetType.SPRITE或Scratch.TargetType.STAGE</td><td>一个过滤器，选择在哪些内容中显示，比如填写<code>[Scratch.TargetType.SPRITE]</code>将只显示在角色的工具箱中。当然，如果填入<code>[]</code>的效果和上一条的效果一样，但是我们应该尽量使用上一个来隐藏某个块。</td></tr></tbody></table><p><code>block</code>后面对应的 Array 中，就是对扩展积木的定义。在这里，我定义了一个 COMMAND 块，上面显示的内容是“示例积木”，它的操作码(<code>opcode</code>)是”SampleBlock”。</p><p>操作码是最重要的一个键，因为它对应了后面对这个块相应的函数的定义。假如我要为这个块编写代码，我就应该在后面定义一个<code>SampleBlock()</code>函数，Scratch 在尝试将这些代码块释放到 <code>Scratch 虚拟机</code> 中的时候，会找到对应操作码的函数，绑定在块上，以便在编辑器中执行。</p><p>在定义一个块的时候，你可以使用一下内容：</p><table><thead><tr><th align="center"></th><th align="center">类型</th><th>介绍</th></tr></thead><tbody><tr><td align="center">opcode</td><td align="center">string</td><td>该块运行时应该运行的函数的名称。例如，如果这是“Sample”，那么将运行类的“Sample”方法。每个扩展中的每个操作码必须是唯一的，因此多个扩展可以每个都有一个操作码为“Sample”的块</td></tr><tr><td align="center">blockType</td><td align="center">Scratch.BlockType.*</td><td>用来决定块的形状，具体见下面一节</td></tr><tr><td align="center">text</td><td align="center">string</td><td>将出现在块编辑器中的文本。当然，这里可能会出现一些特殊的语法，这将在后面讨论</td></tr><tr><td align="center">arguments</td><td align="center">object</td><td>块中可输入的内容。是可选内容，同样在后面讨论</td></tr></tbody></table><p>当然，还有些高级的内容我们可以在后面介绍。</p><h2 id="BlockType-块的类型"><a href="#BlockType-块的类型" class="headerlink" title="BlockType 块的类型"></a><code>BlockType</code> 块的类型</h2><p>玩多了 Scratch ，你应该知道，在 Scratch 中，有很多种不同的块，有像拼图一样的，有圆圆的，有六边形的，也有帽子形状的，还有像个嘴巴一样的 C 的形状的。这就是不同的积木类型，在定义它们的时候，需要根据需求设置它们的类型，接下来我将介绍三个最常见的块类型：</p><h3 id="COMMAND-块"><a href="#COMMAND-块" class="headerlink" title="COMMAND 块"></a>COMMAND 块</h3><p>你应该注意到了，在上一个小节中，我说的是<code>创建一个 COMMAND 块</code>，那什么是 COMMAND 块呢？COMMAND 的意思是指令，命令，也就是说，这个块将执行一个函数，但是不返回内容。所以它在 Scratch 中，就是那种拼图形状的块了。</p><h3 id="REPORTER-块"><a href="#REPORTER-块" class="headerlink" title="REPORTER 块"></a>REPORTER 块</h3><p>我们在使用一些获取值的块的时候，它们通常是圆圆的，比如变量块。这就是 REPORTER 块，它们可以返回函数在运行之后返回的值给 Scratch 编辑器。</p><h3 id="BOOLEN-块"><a href="#BOOLEN-块" class="headerlink" title="BOOLEN 块"></a>BOOLEN 块</h3><p>当然，我们也会遇到一些判断相关的块，它们返回一个布尔值，要么真要么假。这就是 BOOLEN 块，它和 REPORTER 块很像，都可以返回函数的返回值。虽然口头上说的是返回布尔值，但是它们实际上是可以返回其他类型的值的。</p><p>帽子块和C型块将在后面介绍。</p><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>现在，我为你提供一个最简单的扩展示例，这是在 TurboWarp 扩展文档上抄来的，它会返回一个随机数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">random</span> &#123;<br>  <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我去 随机数！&#x27;</span>,<br>      <span class="hljs-attr">blocks</span>: [<br>        &#123;<br>          <span class="hljs-attr">opcode</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>          <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">REPORTER</span>,<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;随机数&#x27;</span><br>        &#125;<br>      ]<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">random</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">random</span>());<br></code></pre></td></tr></table></figure><p>在这里，我定义了一个操作码为 <code>random</code> 的 <code>REPORTER</code> 块，上面显示的文本为 <code>随机数</code> ，之后，根据操作码 <code>random</code> 我在后面定义了一个 <code>random()</code> 函数，并返回一个随机数。这个随机数将会返回到你的 Scratch 编辑器中，你可以在 TurboWarp 加载这个扩展试试。</p><h2 id="处理参数"><a href="#处理参数" class="headerlink" title="处理参数"></a>处理参数</h2><p>恭喜你，已经学会了简单的扩展编写了，但是这完全不可能完成你的需求。你不可能只写一些只返回内容不处理信息的块(诶你可能真要写一个 Navigator 只返回信息呢)。所以传入参数和处理参数是一个很重要的内容。</p><p>首先，我们要学会如何编写一个可以传入参数的块。这其实十分简单，在块定义的<code>text</code>中，使用一个方括号可以创建一个参数框，之后可以在下面定义参数框传入的参数是什么类型，比如String，Boolen等。格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">Scratch</span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtName</span> &#123;<br>        <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;extname&quot;</span>,<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;测试扩展&quot;</span>,<br>                <span class="hljs-attr">color1</span>: <span class="hljs-string">&quot;#66ccff&quot;</span>,<br>                <span class="hljs-attr">blocks</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">opcode</span>: <span class="hljs-string">&quot;Function&quot;</span>,<br>                        <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">COMMAND</span>,<br>                        <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;测试函数 [ARG]&quot;</span>,<br>                        <span class="hljs-attr">arguments</span>: &#123;<br>                            <span class="hljs-attr">ARG</span>: &#123;<br>                                <span class="hljs-attr">type</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">ArgumentType</span>.<span class="hljs-property">STRING</span>,<br>                                <span class="hljs-attr">defaultValue</span>: <span class="hljs-string">&quot;默认值&quot;</span><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;;<br>        &#125;<br><br>      ......<br><br>    &#125;<br><br>    <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtName</span>());<br>&#125;)(<span class="hljs-title class_">Scratch</span>);<br><br></code></pre></td></tr></table></figure><p>其中，<code>arguments</code>之后的键值对可以定义参数的类型和默认值。比如我在上述示例中，就在块中插入了一个<code>ARG</code>参数，然后在<code>arguments</code>中定义了其为<code>STRING</code>类型的参数(即字符串参数)。当然，传入的参数不止有字符串，在下面列出所有可以传入的内容：</p><table><thead><tr><th align="center"></th><th align="center">类型</th><th>介绍</th></tr></thead><tbody><tr><td align="center">Scratch.ArgumentType.STRING</td><td align="center">任意文本</td><td>apple, 123, true</td></tr><tr><td align="center">Scratch.ArgumentType.NUMBER</td><td align="center">任意数字</td><td>123</td></tr><tr><td align="center">Scratch.ArgumentType.BOOLEAN</td><td align="center">一个布尔值，只能塞入布尔块</td><td>true</td></tr><tr><td align="center">Scratch.ArgumentType.COLOR</td><td align="center">一个十六进制的输入框，可以调用Scratch自带的颜色选择器</td><td>#ff4c4c</td></tr><tr><td align="center">Scratch.ArgumentType.ANGLE</td><td align="center">一个角度输入框，90表示向右，逆时针增加</td><td>90, 180</td></tr><tr><td align="center">Scratch.ArgumentType.MATRIX</td><td align="center">一个5x5的矩阵输入框，每个位置只能输入0或1</td><td>11101010101…</td></tr><tr><td align="center">Scratch.ArgumentType.NOTE</td><td align="center">一个音符输入框，可以调用Scratch自带的音符键盘</td><td>?</td></tr><tr><td align="center">Scratch.ArgumentType.IMAGE</td><td align="center">显示的是一个内联图像，并非实际的输入项。相关内容稍后会介绍。</td><td>N&#x2F;A</td></tr><tr><td align="center">Scratch.ArgumentType.COSTUME</td><td align="center">该精灵内的服装名称</td><td>costume1</td></tr><tr><td align="center">Scratch.ArgumentType.SOUND</td><td align="center">该精灵内的声音名称。</td><td>recording1</td></tr></tbody></table><p>Scratch虚拟机需要知道传入的参数的名字是什么，所以在定义参数的时候，需要使用一个方括号来定义参数的名字，比如<code>[ARG]</code>，这样我们就可以获得一个名字叫<code>ARG</code>的参数了，然后就可以在<code>arguments</code>中定义参数的类型和默认值了。</p><p>同时，我们也可以通过这个名字来在函数里获取传入的参数了，就像下面那样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Function</span>(args)&#123;<br>  <span class="hljs-keyword">let</span> x = args.<span class="hljs-property">ARG</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="静态的列表"><a href="#静态的列表" class="headerlink" title="静态的列表"></a>静态的列表</h3><p>如果你仔细观察，你会发现有些块会有个下拉框，从中可以选择一个项来获取参数。比如在运动模块中，你可以看到<code>面向 [DIR]</code>，这个块中的<code>DIR</code>可以提供下拉框选择面向哪个角色或者鼠标指针。在生活中我们不乏遇到选择，所以处理一个列表也是重要的一环。</p><p>列表项目的定义和普通参数一样，不过我们需要再<code>arguments</code>中将<code>defaultValue</code>改为<code>menu</code>，这样Scratch就会在定义中读取一个数组作为静态列表。格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Strings1</span> &#123;<br>  <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;strings1example&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Encoding&#x27;</span>,<br>      <span class="hljs-attr">blocks</span>: [<br>        &#123;<br>          <span class="hljs-attr">opcode</span>: <span class="hljs-string">&#x27;convert&#x27;</span>,<br>          <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">REPORTER</span>,<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;convert [TEXT] to [FORMAT]&#x27;</span>,<br>          <span class="hljs-attr">arguments</span>: &#123;<br>            <span class="hljs-attr">TEXT</span>: &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">ArgumentType</span>.<span class="hljs-property">STRING</span>,<br>              <span class="hljs-attr">defaultValue</span>: <span class="hljs-string">&#x27;Apple&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">FORMAT</span>: &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">ArgumentType</span>.<span class="hljs-property">STRING</span>,<br>              <span class="hljs-attr">menu</span>: <span class="hljs-string">&#x27;FORMAT_MENU&#x27;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-attr">menus</span>: &#123;<br>        <span class="hljs-attr">FORMAT_MENU</span>: &#123;<br>          <span class="hljs-attr">acceptReporters</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">items</span>: [<span class="hljs-string">&#x27;uppercase&#x27;</span>, <span class="hljs-string">&#x27;lowercase&#x27;</span>]<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">convert</span> (args) &#123;<br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">FORMAT</span> === <span class="hljs-string">&#x27;uppercase&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 注意到这段代码中的 toString() 调用：TEXT 可能是数字或布尔值，</span><br>      <span class="hljs-comment">// 所以我们必须先将其转换为字符串，以便它具有 toUpperCase() 函数，</span><br>      <span class="hljs-comment">// 否则就会出现错误！</span><br>      <span class="hljs-comment">// 要记住：参数的“类型”只是编辑器给出的建议；它从未被强制执行。</span><br>      <span class="hljs-keyword">return</span> args.<span class="hljs-property">TEXT</span>.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toUpperCase</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> args.<span class="hljs-property">TEXT</span>.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toLowerCase</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Strings1</span>());<br></code></pre></td></tr></table></figure><p>这是我在TurboWarp上抄来的实例，其中，处理了用户输入强制转换为字符串。这是一个很明智的选择，也是个很重要的选择，可以避免很多因为错误输入带来的问题。上述代码中，<code>FORMAT_MENU</code>就是一个列表。在<code>getInfo</code>中添加了一个<code>menus</code>属性，之后定义了<code>FORMAT_MENU</code>列表，其中<code>items</code>是一个数组，也就是列表中显示的项目。</p><p>如果你希望文本和输入的值不同，你可以像这样编写items：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">FORMAT_MENU</span>: &#123;<br>  <span class="hljs-attr">acceptReporter</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">items</span>: [<br>    &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&quot;大写&quot;</span> ,<span class="hljs-attr">value</span>:<span class="hljs-string">&quot;uppercase&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&quot;小写&quot;</span> ,<span class="hljs-attr">value</span>:<span class="hljs-string">&quot;lowercase&quot;</span>&#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，下拉框中将不显示<code>uppercase</code>或<code>lowercase</code>，而是显示<code>大写</code>或<code>小写</code>。</p><p>我们可以看到，有个<code>acceptReporter</code>键值对，这是用来确认这个列表的位置是否可以塞入一个高级的东西，比如<code>REPORTER</code>块和<code>BOOLEN</code>块。如果填写<code>true</code>，那么就可以塞入一个变量之类的东西：这种情况，字符串处理就十分必要了。</p><p>在前面，我提到了使用<code>Scratch.translate()</code>进行多语言支持，在<code>text</code>后面你依然可以使用这个函数来确定显示的文本是什么。</p>]]></content>
    
    
    <categories>
      
      <category>Scratch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scratch</tag>
      
      <tag>Primer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>光辉岁月</title>
    <link href="/2023/09/14/%E5%85%89%E8%BE%89%E5%B2%81%E6%9C%88/"/>
    <url>/2023/09/14/%E5%85%89%E8%BE%89%E5%B2%81%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>晚饭的时间，我在夕阳下走向小卖部，要去买点东西吃。</p><p>作业已然成为了生活的重担，我并没有什么心情去看这夕阳下的风光，只是静默地走过了整个操场。</p><p>我买了吃的，走出了商店，在稀疏的人群中。我抬起头喝水，看到了这样的一幕：几个老师和学生在一块打球，另一个场是几个男孩的激烈战场。羽毛球场已然是热血沸腾，乒乓球上的招式也所谓眼花缭乱。走几步，一大群人在足球场上听教练的指导、练习。</p><p>好像夕阳就是这么为他们而出现的。我把盖子拧上，走到了林荫道上。走在人群中间，我听到有人在谈论作业，有人在八卦。在六艺楼，也有人在弹钢琴。乐声悠扬传来，纵使我不知道弹了什么。</p><p>好像夕阳就是这么为他们而出现的。我捏了捏手上的维生素C片。我摇出了响声。但我并没有止住回去的脚步。夕阳是不属于我的。我的眼中是黑夜，无尽的黑夜。但是夕阳着实给了他们光辉岁月。这是属于他们的。</p><p>就像我在桌前急书一样，这是属于我的光辉岁月。</p><div style="text-align:right"><p>玖月壹拾肆日<br>作于B中 </p></div>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
