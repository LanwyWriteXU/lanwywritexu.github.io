<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>雨</title>
    <link href="/2025/05/30/rain/"/>
    <url>/2025/05/30/rain/</url>
    
    <content type="html"><![CDATA[<p>一个人，就百无聊赖地坐在看台上，望着天上发呆。一直是一个人，其他人都肩碰肩地聊着什么，从下面踱过，一直是一个人。</p><p>他不是抑郁了，只是悲伤。</p><p>不知道什么时候，他开始感受到时间的流逝。他能在一夜间将过去的十六年都回忆一遍，十分迅速地。感觉就是一瞬间。</p><p>孤零零地坐着，一个人。天空很蓝，白云一团一团地从太阳下面走过。不知道为什么，他忽然渴望一场雨，把自己浇得湿透。</p><p>正是一个雨夜，他撑着破旧的伞，回到家。酒味，汗味，烟味。屋里昏暗，电视的声音很小，只能听见两个人的争吵。他的妹妹蜷缩在角落，含着泪，在看一本什么《简·爱》。他带上门，把伞撑开，摆在阳台。雨，狠狠地打在铁棚上，发出骇人的声响。</p><p>这并不是他们第一次争吵了。他对此感到习以为常，所以毫无压力地穿过两人，去牵妹妹的手。“去洗漱，睡觉了。”他说。他的妹妹才颤抖着合上书，跟着哥哥在两人的争吵声中去了洗手间洗漱。</p><p>“你以为我很快乐么？我感觉我就是一只被束缚在笼子里的鸟！”女人大吼。</p><p>“那你离婚就可以快乐了？”男人坐在餐桌旁，把啤酒杯用力地搁在桌上。</p><p>“比现在快乐，”女人尖叫，“远远比现在快乐。”</p><p>男人又点了一支烟，抽了一口，火星的光亮在暗中若隐若现。然后喷出一股白烟。</p><p>他在洗手间刷着牙，没有对他们的对话产生任何情绪。</p><p>大抵是没有情绪，只是垮着脸，一言不发地听着，吵架声和刷牙声。</p><p>他听到两人从生活一直吵到孩子。他洗漱完，去睡觉。走之前，他对两人说：“你们小声一点，我要睡觉。”然后弱弱地回了房间。</p><p>酒味，汗味，烟味。他强迫自己闭上眼，然后入睡。外面的声音杂乱，吵架声，雨声，雷声，风刮过窗洞的呼声和异物达到玻璃上的声音。有时还有楼下的，小孩子在雨中嬉闹的笑声。</p><p>起床，看着乱糟糟的客厅，和镜中乱糟糟的自己，他感到一丝空虚。简单洗漱之后，他走路去学校，没吃早饭。</p><p>校园的一角是热闹的，校园的一角是死寂的。他不敢跨进前者，只好在后者中隐匿。没有人会在意一个坐在看台上的，傻乎乎望着天空发呆的人。</p><p>他曾尝试加入热闹的一角。他加入各种社团，参加各种志愿，也学习各种别人的爱好。但他失败了。他就想一个“杂质”一样，永远不和任何试剂反应。所以他还是一个人头孤零零地坐着。</p><p>有那么一段日子，是有个女孩和他做朋友的。他们关系很好，女孩对男孩的照顾无微不至。他和她聊天，感觉自己活了，感觉自己才是活生生的人。但不知道什么时候，女孩离开了学校，大抵是转学了，他也至此再未见过她。</p><p>他再次变回那个死气沉沉的样子。</p><p>坐在看台上，他开始回忆他的从前。</p><p>幼儿园时，他在众人的期待中成长。在小学时候，他的才华就被展现了除了，他活力四射，很调皮。直到上了初中，他才见识到“人情世故”，才意识到社会的运行并非自己想象那样单纯：针对和排斥，冷眼和嘲讽，各种东西在他的眼中发生。他开始怕了，他开始担心了，他开始畏惧不前了。</p><p>他还记得他的父亲居高临下地看着他，把一口烟喷到他的脸上：“你看看你，长得也不好看，办事也净帮倒忙，什么技能都不会。”所以他怕他的父亲，至始至终都很怕。不过他的母亲却经常拍拍他的背，在他挫败的时候鼓励他，在他成功的时候赞美他。</p><p>他的父亲后来创业失败，亏损很多，又想换车，借了车贷，家境拮据；在那之后，便萎靡不振，酗酒，动不动就骂他。他的父亲还为此减少了向他和他母亲提供的生活费。</p><p>他的父亲沉迷于花天酒地中，却又时刻提防着他的母亲的交友和日常生活。</p><p>所以两人开始吵架了，嚷嚷着要离婚。</p><p>那就离婚罢，他一直都无所谓的。他被划给了他的父亲。</p><p>而他的父亲，仿佛是要想他赎罪一样，也开始不厌其烦地关照他了。</p><p>他就一个人，一个人坐在看台上。</p><p>他忽然大吼一声：“如果能回到过去该多好。”有几个压马路的人看了他一眼，然后又聊着天走开了。</p><p>他觉得现在的日子也很好，至少没差。不过少了些说话的人而已。他可以在死寂的一角，静静地看云朵飘动，可以看时间就带着一群记忆笑着从他面前跑过去。有人告诉他，没有理想，那和咸鱼有什么区别。他只是笑笑，问那个人，咸鱼翻身就不是咸鱼了吗？</p><p>他仿佛想通了什么，他发现自己不可能活成别人期待的样子，他只有活成一个别人从未想过的样子。在成人之前要先成为自己。他明白，一个人要是活在对过去的想象和荣耀中，那肯定是难以进步的。时间还在跑，日子还得过。</p><p>雨最后还是没有下，云还是照常在天上缓缓地行径着，一会儿挡住了太阳，一会儿又移开为阳光让道。一些人聊天的声音，夹杂着风吹动树叶发出的声音。如果能有时光机，他真想回到过去，在那个他还是个淳朴的小孩子的时候，告诉过去的他要珍惜这些时光，告诉他这样的日子还能有多久。</p><div style="text-align:right"><p>二〇二五年五月三十日<br>作于B中 </p></div>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单地编写一个Scratch扩展</title>
    <link href="/2025/03/09/How-to-write-a-Scratch-extension/"/>
    <url>/2025/03/09/How-to-write-a-Scratch-extension/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着<strong>图形化编程</strong>的兴起，比如 <strong>Scratch</strong>、<strong>编程猫</strong>和 Mind+ 等等变得越来越受欢迎。同时，像 Scratch 原有的内容已经不足以给各位提供足够的函数了。像 <strong><a href="https://turbowarp.org/">TurboWarp</a></strong>、<strong><a href="https://ccw.site/gandi">Gandi IDE</a></strong>、Scratch Lab、Scratch X 等就提供了丰富的非原版函数库(即扩展，mod)。比如，你可以访问 <a href="https://extension.turbowarp.org/">TurboWarp扩展库</a> 来查看 TurboWarp 为 Scratchers 提供的扩展。扩展和其他编程语言的“库函数”相似，都是添加原来没有的函数内容。如果你认为这些内容还不够你用，那你就得自己写了。怎么写呢？接下来就听我娓娓道来！</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>很显然，你需要一个好用的<strong>文本编辑器</strong>(比如 VSCode、Notepad++等，当然，你直接用记事本也可以)、一个可以加载自定义扩展的 Scratch Mod (比如 <a href="https://turbowarp.org/editor">TurboWarp</a>、<a href="https://www.ccw.site/gandi/extension">Gandi IDE 扩展模式</a>等)、以及一些 JavaScript 基础。</p><p>如果你自恃拥有强大的编程能力和足够的英语基础，你可以前往 <a href="https://docs.turbowarp.org/development">TurboWarp 扩展文档</a> 查看更官方更权威的扩展教程。</p><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><p>首先，我将为你展示 Scratch 扩展文件的基本结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">Scratch</span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br><br>    <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">setup</span>(&#123;...&#125;);<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtName</span> &#123;<br>        <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">id</span>: ...<br>                <span class="hljs-attr">name</span>: ...<br>                ...<br>            &#125;;<br>        &#125;<br><br>        <span class="hljs-title class_">Function</span>(arg) &#123;...&#125;<br>    &#125;<br><br>    <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtName</span>());<br>&#125;)(<span class="hljs-title class_">Scratch</span>);<br></code></pre></td></tr></table></figure><p>如上，这就是最基本的 Scratch 扩展格式。其中，<code>Scratch.translate.setup()</code>为你的扩展提供了 l10n (本地化)支持，可以提供这个函数来设置多语言。之后就是定义一个类了，这个类当中包含了你的扩展的信息(<code>getInfo</code>)和函数定义。最后，通过<code>Scratch.extensions.register()</code>函数来注册这个扩展。</p><p>接下来，让我们慢慢讲具体的内容~</p><h2 id="Scratch-translate-setup-l10n-支持"><a href="#Scratch-translate-setup-l10n-支持" class="headerlink" title="Scratch.translate.setup() l10n 支持"></a><code>Scratch.translate.setup()</code> l10n 支持</h2><p>在 Scratch 扩展中，<code>Scratch.translate.setup()</code>的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Scratch</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">setup</span>(&#123;<br>    <span class="hljs-string">&quot;en&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;_key&quot;</span>: <span class="hljs-string">&quot;translation&quot;</span>,<br>        ...<br>    &#125;,<br>    <span class="hljs-string">&quot;zh-cn&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;_key&quot;</span>: <span class="hljs-string">&quot;翻译&quot;</span>,<br>        ...<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>给这个函数提供一个 JSON 参数，在之后重新调用<code>Scratch.translate()</code>函数就可以将<code>key</code>字符串自动转换为对应的值(也就是翻译内容)。比如，我在上面设置了<code>&quot;_key&quot;</code>对应的值是<code>&quot;翻译&quot;</code>，那么，当我的编辑器语言为简体中文<code>(zh-cn)</code>的时候，<code>Scratch.translate(&quot;key&quot;)</code>就会返回<code>&quot;翻译&quot;</code>。</p><p>这是由 Scratch 本身提供的翻译功能，善用它会取得不错的成效。</p><h2 id="getInfo-给你的扩展编写信息"><a href="#getInfo-给你的扩展编写信息" class="headerlink" title="getInfo() 给你的扩展编写信息"></a><code>getInfo()</code> 给你的扩展编写信息</h2><p>在<code>getInfo()</code>函数中，你应该为其定义编写一堆内容，包括了<code>扩展ID</code>，<code>扩展名</code>，<code>扩展积木颜色</code>，<code>扩展积木</code>等等。接下来我会给出一个简单的 getInfo() 示例，它可以创建一个 COMMAND 块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;SampleExt&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;示例扩展&quot;</span>,<br>        <span class="hljs-attr">color1</span>: <span class="hljs-string">&quot;#66ccff&quot;</span>,<br>        <span class="hljs-attr">blocks</span>: [<br>            &#123;<br>                <span class="hljs-attr">opcode</span>: <span class="hljs-string">&quot;SampleBlock&quot;</span>,<br>                <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">COMMAND</span>,<br>                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;示例积木&quot;</span><br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，在<code>getInfo()</code>的定义中，你会看到一些键值对，比如<code>id</code>、<code>name</code>、<code>color1</code>等等。其中，<code>block</code>后面对应的 Array 中，就是对扩展积木的定义。在这里，我定义了一个 COMMAND 块，上面显示的内容是“示例积木”，它的操作码(<code>opcode</code>)是”SampleBlock”。</p><p>操作码是最重要的一个键，因为它对应了后面对这个块相应的函数的定义。假如我要为这个块编写代码，我就应该在后面定义一个<code>SampleBlock()</code>函数，Scratch 在尝试将这些代码块释放到 <code>Scratch 虚拟机</code> 中的时候，会找到对应操作码的函数，绑定在块上，以便在编辑器中执行。</p><p>在定义一个块的时候，你可以使用一下内容：</p><table><thead><tr><th align="center"></th><th align="center">类型</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">opcode</td><td align="center">string</td><td align="center">该块运行时应该运行的函数的名称。例如，如果这是“Sample”，那么将运行类的“Sample”方法。每个扩展中的每个操作码必须是唯一的，因此多个扩展可以每个都有一个操作码为“Sample”的块</td></tr><tr><td align="center">blockType</td><td align="center">Scratch.BlockType.*</td><td align="center">用来决定块的形状，具体见下面一节</td></tr><tr><td align="center">text</td><td align="center">string</td><td align="center">将出现在块编辑器中的文本。当然，这里可能会出现一些特殊的语法，这将在后面讨论</td></tr><tr><td align="center">arguments</td><td align="center">object</td><td align="center">块中可输入的内容。是可选内容，同样在后面讨论</td></tr></tbody></table><h2 id="BlockType-块的类型"><a href="#BlockType-块的类型" class="headerlink" title="BlockType 块的类型"></a><code>BlockType</code> 块的类型</h2><p>玩多了 Scratch ，你应该知道，在 Scratch 中，有很多种不同的块，有像拼图一样的，有圆圆的，有六边形的，也有帽子形状的，还有像个嘴巴一样的 C 的形状的。这就是不同的积木类型，在定义它们的时候，需要根据需求设置它们的类型，接下来我将介绍三个最常见的块类型：</p><h3 id="COMMAND-块"><a href="#COMMAND-块" class="headerlink" title="COMMAND 块"></a>COMMAND 块</h3><p>你应该注意到了，在上一个小节中，我说的是<code>创建一个 COMMAND 块</code>，那什么是 COMMAND 块呢？COMMAND 的意思是指令，命令，也就是说，这个块将执行一个函数，但是不返回内容。所以它在 Scratch 中，就是那种拼图形状的块了。</p><h3 id="REPORTER-块"><a href="#REPORTER-块" class="headerlink" title="REPORTER 块"></a>REPORTER 块</h3><p>我们在使用一些获取值的块的时候，它们通常是圆圆的，比如变量块。这就是 REPORTER 块，它们可以返回函数在运行之后返回的值给 Scratch 编辑器。</p><h3 id="BOOLEN-块"><a href="#BOOLEN-块" class="headerlink" title="BOOLEN 块"></a>BOOLEN 块</h3><p>当然，我们也会遇到一些判断相关的块，它们返回一个布尔值，要么真要么假。这就是 BOOLEN 块，它和 REPORTER 块很像，都可以返回函数的返回值。虽然口头上说的是返回布尔值，但是它们实际上是可以返回其他类型的值的。</p><p>帽子块和C型块将在后面介绍。</p><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>现在，我为你提供一个最简单的扩展示例，这是在 TurboWarp 扩展文档上抄来的，它会返回一个随机数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">random</span> &#123;<br>  <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我去 随机数！&#x27;</span>,<br>      <span class="hljs-attr">blocks</span>: [<br>        &#123;<br>          <span class="hljs-attr">opcode</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>          <span class="hljs-attr">blockType</span>: <span class="hljs-title class_">Scratch</span>.<span class="hljs-property">BlockType</span>.<span class="hljs-property">REPORTER</span>,<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;随机数&#x27;</span><br>        &#125;<br>      ]<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">random</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Scratch</span>.<span class="hljs-property">extensions</span>.<span class="hljs-title function_">register</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">random</span>());<br></code></pre></td></tr></table></figure><p>在这里，我定义了一个操作码为 <code>random</code> 的 <code>REPORTER</code> 块，上面显示的文本为 <code>随机数</code> ，之后，根据操作码 <code>random</code> 我在后面定义了一个 <code>random()</code> 函数，并返回一个随机数。这个随机数将会返回到你的 Scratch 编辑器中，你可以在 TurboWarp 加载这个扩展试试。</p><h2 id="处理参数"><a href="#处理参数" class="headerlink" title="处理参数"></a>处理参数</h2><p>恭喜你，已经学会了简单的扩展编写了，但是这完全不可能完成你的需求。你不可能只写一些只返回内容不处理信息的块(诶你可能真要写一个 Navigator 只返回信息呢)。所以传入参数和处理参数是一个很重要的内容。</p>]]></content>
    
    
    <categories>
      
      <category>Scratch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scratch</tag>
      
      <tag>Primer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>光辉岁月</title>
    <link href="/2023/09/14/%E5%85%89%E8%BE%89%E5%B2%81%E6%9C%88/"/>
    <url>/2023/09/14/%E5%85%89%E8%BE%89%E5%B2%81%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>晚饭的时间，我在夕阳下走向小卖部，要去买点东西吃。</p><p>作业已然成为了生活的重担，我并没有什么心情去看这夕阳下的风光，只是静默地走过了整个操场。</p><p>我买了吃的，走出了商店，在稀疏的人群中。我抬起头喝水，看到了这样的一幕：几个老师和学生在一块打球，另一个场是几个男孩的激烈战场。羽毛球场已然是热血沸腾，乒乓球上的招式也所谓眼花缭乱。走几步，一大群人在足球场上听教练的指导、练习。</p><p>好像夕阳就是这么为他们而出现的。我把盖子拧上，走到了林荫道上。走在人群中间，我听到有人在谈论作业，有人在八卦。在六艺楼，也有人在弹钢琴。乐声悠扬传来，纵使我不知道弹了什么。</p><p>好像夕阳就是这么为他们而出现的。我捏了捏手上的维生素C片。我摇出了响声。但我并没有止住回去的脚步。夕阳是不属于我的。我的眼中是黑夜，无尽的黑夜。但是夕阳着实给了他们光辉岁月。这是属于他们的。</p><p>就像我在桌前急书一样，这是属于我的光辉岁月。</p><div style="text-align:right"><p>玖月壹拾肆日<br>作于B中 </p></div>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
